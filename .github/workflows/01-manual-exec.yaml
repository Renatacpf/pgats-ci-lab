# CI de Nível 01 - Disparo manual a partir de 1 clique

# nome do nosso 'pipeline'
name: 'Execução Manual'

# regras de disparo (gatilhos/triggers)
on:
  workflow_dispatch:

# trabalhos/tarefas dentro do pipeline = jobs
jobs:
  e2e-tests:
    runs-on: self-hosted

    steps:
      # clone do projeto
      - uses: actions/checkout@v4
        with:
          clean: true # Mantém a limpeza do diretório de checkout

      # --- INÍCIO DAS ETAPAS DE DEPURACÃO APRIMORADAS ---

      - name: 1. Listar arquivos e verificar diretório de trabalho (antes da limpeza)
        run: |
          echo "Diretório de trabalho atual: $(pwd)"
          echo "Conteúdo de '$env:GITHUB_WORKSPACE' antes da limpeza:"
          Get-ChildItem -Path $env:GITHUB_WORKSPACE -Recurse -ErrorAction SilentlyContinue # Lista tudo, incluindo subpastas
          echo "Conteúdo de '$env:GITHUB_WORKSPACE\test-results' antes da limpeza:"
          Get-ChildItem -Path "$env:GITHUB_WORKSPACE\test-results" -Recurse -ErrorAction SilentlyContinue
        shell: pwsh

      - name: 2. Limpar diretório de relatórios antigos (remover a pasta inteira)
        run: |
          $reportDir = "$env:GITHUB_WORKSPACE\test-results"
          echo "Tentando remover diretório de relatórios: $reportDir"
          if (Test-Path $reportDir) {
            Remove-Item -Path $reportDir -Recurse -Force -ErrorAction Stop # Remove a pasta inteira e força
            echo "Diretório de relatórios '$reportDir' removido com sucesso."
          } else {
            echo "Nenhum diretório de relatórios '$reportDir' encontrado para remover."
          }
        shell: pwsh

      - name: 3. Listar arquivos no diretório de trabalho após a limpeza
        run: |
          echo "Conteúdo de '$env:GITHUB_WORKSPACE' após a limpeza:"
          Get-ChildItem -Path $env:GITHUB_WORKSPACE -Recurse -Depth 1
          echo "Conteúdo de '$env:GITHUB_WORKSPACE\test-results' após a limpeza (deve estar vazio ou não existir):"
          Get-ChildItem -Path "$env:GITHUB_WORKSPACE\test-results" -Recurse -ErrorAction SilentlyContinue
        shell: pwsh

      # --- FIM DAS ETAPAS DE DEPURACÃO (pré-instalação) ---

      # instalação do Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 22.x

      # instalação do Yarn
      - name: Instalando Yarn
        run: npm install -g yarn
        shell: pwsh

      # instalação das dependências
      - name: Instalando dependências
        run: yarn
        shell: pwsh
        
      # instalação do Playwright
      - name: Instalando Playwright
        run: yarn playwright install
        shell: pwsh

      # execução dos testes
      - name: Executando testes E2E
        run: yarn run e2e
        shell: pwsh

      # --- INÍCIO DAS ETAPAS DE DEPURACÃO (pós-execução de testes) ---

      - name: 4. Listar arquivos no diretório de trabalho após a execução dos testes (DETALHADO)
        run: |
          echo "Conteúdo de '$env:GITHUB_WORKSPACE' após a execução dos testes:"
          Get-ChildItem -Path $env:GITHUB_WORKSPACE -Recurse -Depth 2 # Aumenta a profundidade para ver test-results
          echo "Conteúdo da pasta 'test-results':"
          Get-ChildItem -Path "$env:GITHUB_WORKSPACE\test-results" -Recurse -ErrorAction SilentlyContinue
        shell: pwsh

      - name: 5. Verificar e exibir conteúdo do results.xml gerado (DETALHADO)
        run: |
          $reportPath = "$env:GITHUB_WORKSPACE\test-results\results.xml" # Caminho atualizado
          echo "Verificando o arquivo de relatório gerado: $reportPath"
          if (Test-Path $reportPath) {
            echo "Arquivo 'results.xml' encontrado. Conteúdo (primeiras 20 linhas):"
            Get-Content -Path $reportPath | Select-Object -First 20
          } else {
            echo "ERRO CRÍTICO: Arquivo 'results.xml' NÃO encontrado em '$reportPath' após a execução dos testes."
            exit 1 # Falha o job se o arquivo não for encontrado
          }
        shell: pwsh

      # --- FIM DAS ETAPAS DE DEPURACÃO ---

      # Publicar relatório de testes
      - name: Publicar relatório de testes
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Test Report
          # CUIDADO: O caminho aqui deve ser o mesmo que o Playwright está gerando
          path: ./test-results/results.xml # <--- Caminho atualizado e correto
          reporter: java-junit